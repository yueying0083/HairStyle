package cn.yueying.hairstyle;

import java.io.Serializable;
import java.util.List;
import cn.yueying.hairstyle.DaoSession;
import cn.yueying.hairstyle.view.ImageReadableObj;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HAIR_STYLE.
 */
public class HairStyle implements ImageReadableObj, Serializable {

	private static final long serialVersionUID = 8823632506305321091L;
	private Long id;
	private String baseLink;
	private String title;
	private java.util.Date pDate;
	private String source;
	private String abstruct;
	private String mainPic;
	private Integer picWidth;
	private Integer picHeight;
	private String label;
	private Integer typeId;
	private Integer pageId;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient HairStyleDao myDao;

	private List<HairStyleContent> hairStyleContentList;

	public HairStyle() {
	}

	public HairStyle(Long id) {
		this.id = id;
	}

	public HairStyle(Long id, String baseLink, String title, java.util.Date pDate, String source, String abstruct, String mainPic, Integer picWidth, Integer picHeight, String label, Integer typeId,
			Integer pageId) {
		this.id = id;
		this.baseLink = baseLink;
		this.title = title;
		this.pDate = pDate;
		this.source = source;
		this.abstruct = abstruct;
		this.mainPic = mainPic;
		this.picWidth = picWidth;
		this.picHeight = picHeight;
		this.label = label;
		this.typeId = typeId;
		this.pageId = pageId;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getHairStyleDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getBaseLink() {
		return baseLink;
	}

	public void setBaseLink(String baseLink) {
		this.baseLink = baseLink;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public java.util.Date getPDate() {
		return pDate;
	}

	public void setPDate(java.util.Date pDate) {
		this.pDate = pDate;
	}

	public String getSource() {
		return source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	public String getAbstruct() {
		return abstruct;
	}

	public void setAbstruct(String abstruct) {
		this.abstruct = abstruct;
	}

	public String getMainPic() {
		return mainPic;
	}

	public void setMainPic(String mainPic) {
		this.mainPic = mainPic;
	}

	public Integer getPicWidth() {
		return picWidth;
	}

	public void setPicWidth(Integer picWidth) {
		this.picWidth = picWidth;
	}

	public Integer getPicHeight() {
		return picHeight;
	}

	public void setPicHeight(Integer picHeight) {
		this.picHeight = picHeight;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
	}

	public Integer getTypeId() {
		return typeId;
	}

	public void setTypeId(Integer typeId) {
		this.typeId = typeId;
	}

	public Integer getPageId() {
		return pageId;
	}

	public void setPageId(Integer pageId) {
		this.pageId = pageId;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public List<HairStyleContent> getHairStyleContentList() {
		if (hairStyleContentList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			HairStyleContentDao targetDao = daoSession.getHairStyleContentDao();
			List<HairStyleContent> hairStyleContentListNew = targetDao._queryHairStyle_HairStyleContentList(id);
			synchronized (this) {
				if (hairStyleContentList == null) {
					hairStyleContentList = hairStyleContentListNew;
				}
			}
		}
		return hairStyleContentList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetHairStyleContentList() {
		hairStyleContentList = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	private final String BASE_URL = "http://www.faxingw.cn";

	@Override
	public String getImageUrl() {
		return mainPic.startsWith("http") ? mainPic : (BASE_URL + mainPic);
	}

	@Override
	public int getImageWidth() {
		return picWidth;
	}

	@Override
	public int getImageHeight() {
		return picHeight;
	}

}
