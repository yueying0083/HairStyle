package cn.yueying.hairstyle;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.yueying.hairstyle.HairStyle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HAIR_STYLE.
*/
public class HairStyleDao extends AbstractDao<HairStyle, Long> {

    public static final String TABLENAME = "HAIR_STYLE";

    /**
     * Properties of entity HairStyle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BaseLink = new Property(1, String.class, "baseLink", false, "BASE_LINK");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property PDate = new Property(3, java.util.Date.class, "pDate", false, "P_DATE");
        public final static Property Source = new Property(4, String.class, "source", false, "SOURCE");
        public final static Property Abstruct = new Property(5, String.class, "abstruct", false, "ABSTRUCT");
        public final static Property MainPic = new Property(6, String.class, "mainPic", false, "MAIN_PIC");
        public final static Property PicWidth = new Property(7, Integer.class, "picWidth", false, "PIC_WIDTH");
        public final static Property PicHeight = new Property(8, Integer.class, "picHeight", false, "PIC_HEIGHT");
        public final static Property Label = new Property(9, String.class, "label", false, "LABEL");
        public final static Property TypeId = new Property(10, Integer.class, "typeId", false, "TYPE_ID");
        public final static Property PageId = new Property(11, Integer.class, "pageId", false, "PAGE_ID");
    };

    private DaoSession daoSession;


    public HairStyleDao(DaoConfig config) {
        super(config);
    }
    
    public HairStyleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HAIR_STYLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BASE_LINK' TEXT," + // 1: baseLink
                "'TITLE' TEXT," + // 2: title
                "'P_DATE' INTEGER," + // 3: pDate
                "'SOURCE' TEXT," + // 4: source
                "'ABSTRUCT' TEXT," + // 5: abstruct
                "'MAIN_PIC' TEXT," + // 6: mainPic
                "'PIC_WIDTH' INTEGER," + // 7: picWidth
                "'PIC_HEIGHT' INTEGER," + // 8: picHeight
                "'LABEL' TEXT," + // 9: label
                "'TYPE_ID' INTEGER," + // 10: typeId
                "'PAGE_ID' INTEGER);"); // 11: pageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HAIR_STYLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HairStyle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String baseLink = entity.getBaseLink();
        if (baseLink != null) {
            stmt.bindString(2, baseLink);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        java.util.Date pDate = entity.getPDate();
        if (pDate != null) {
            stmt.bindLong(4, pDate.getTime());
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(5, source);
        }
 
        String abstruct = entity.getAbstruct();
        if (abstruct != null) {
            stmt.bindString(6, abstruct);
        }
 
        String mainPic = entity.getMainPic();
        if (mainPic != null) {
            stmt.bindString(7, mainPic);
        }
 
        Integer picWidth = entity.getPicWidth();
        if (picWidth != null) {
            stmt.bindLong(8, picWidth);
        }
 
        Integer picHeight = entity.getPicHeight();
        if (picHeight != null) {
            stmt.bindLong(9, picHeight);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(10, label);
        }
 
        Integer typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(11, typeId);
        }
 
        Integer pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindLong(12, pageId);
        }
    }

    @Override
    protected void attachEntity(HairStyle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HairStyle readEntity(Cursor cursor, int offset) {
        HairStyle entity = new HairStyle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // baseLink
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // pDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // source
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // abstruct
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mainPic
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // picWidth
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // picHeight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // label
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // typeId
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // pageId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HairStyle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBaseLink(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSource(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAbstruct(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMainPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicWidth(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPicHeight(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLabel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTypeId(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPageId(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HairStyle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HairStyle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
