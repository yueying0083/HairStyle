package cn.yueying.hairstyle;

import java.io.Serializable;
import cn.yueying.hairstyle.DaoSession;
import cn.yueying.waterfalllibrary.model.ImageReadableObj;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HAIR_STYLE_CONTENT.
 */
public class HairStyleContent implements ImageReadableObj, Serializable {

	private static final long serialVersionUID = 8944297744116241407L;
	private Long id;
	private long styleId;
	private String picUrl;
	private String contentDesc;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient HairStyleContentDao myDao;

	private HairStyle hairStyle;
	private Long hairStyle__resolvedKey;

	public HairStyleContent() {
	}

	public HairStyleContent(Long id) {
		this.id = id;
	}

	public HairStyleContent(Long id, long styleId, String picUrl, String contentDesc) {
		this.id = id;
		this.styleId = styleId;
		this.picUrl = picUrl;
		this.contentDesc = contentDesc;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getHairStyleContentDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public long getStyleId() {
		return styleId;
	}

	public void setStyleId(long styleId) {
		this.styleId = styleId;
	}

	public String getPicUrl() {
		return picUrl;
	}

	public void setPicUrl(String picUrl) {
		this.picUrl = picUrl;
	}

	public String getContentDesc() {
		return contentDesc;
	}

	public void setContentDesc(String contentDesc) {
		this.contentDesc = contentDesc;
	}

	/** To-one relationship, resolved on first access. */
	public HairStyle getHairStyle() {
		long __key = this.styleId;
		if (hairStyle__resolvedKey == null || !hairStyle__resolvedKey.equals(__key)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			HairStyleDao targetDao = daoSession.getHairStyleDao();
			HairStyle hairStyleNew = targetDao.load(__key);
			synchronized (this) {
				hairStyle = hairStyleNew;
				hairStyle__resolvedKey = __key;
			}
		}
		return hairStyle;
	}

	public void setHairStyle(HairStyle hairStyle) {
		if (hairStyle == null) {
			throw new DaoException("To-one property 'styleId' has not-null constraint; cannot set to-one to null");
		}
		synchronized (this) {
			this.hairStyle = hairStyle;
			styleId = hairStyle.getId();
			hairStyle__resolvedKey = styleId;
		}
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	private final String BASE_URL = "http://www.faxingw.cn";

	@Override
	public String getImageUrl() {
		return picUrl.startsWith("http") ? picUrl : (BASE_URL + picUrl);
	}

	@Override
	public int getImageWidth() {
		return 0;
	}

	@Override
	public int getImageHeight() {
		return 0;
	}

}
